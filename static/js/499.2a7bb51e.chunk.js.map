{"version":3,"file":"static/js/499.2a7bb51e.chunk.js","mappings":"mTAEMA,EAAW,+BACXC,EAAM,mCAECC,EAAa,mCAAG,oGACJC,EAAAA,GAAAA,IAAA,UAClBH,EADkB,wCACsBC,IAFlB,cACrBG,EADqB,OAI3BC,QAAQC,IAAIF,EAASG,KAAKC,SAJC,kBAKpBJ,EAASG,MALW,2CAAH,qDAQbE,EAAgB,mCAAG,WAAMC,GAAN,uFACPP,EAAAA,GAAAA,IAAA,UAClBH,EADkB,iCACeC,EADf,kBAC4BS,IAFrB,cACxBN,EADwB,yBAIvBA,EAASG,MAJc,2CAAH,sDAOhBI,EAAiB,mCAAG,WAAMC,GAAN,uFACRT,EAAAA,GAAAA,IAAA,UAClBH,EADkB,kBACAY,EADA,oBACmBX,IAFX,cACzBG,EADyB,OAI/BC,QAAQC,IAAIF,EAASG,MAJU,kBAKxBH,EAASG,MALe,2CAAH,sDAQjBM,EAAiB,mCAAG,WAAMD,GAAN,uFACRT,EAAAA,GAAAA,IAAA,UAClBH,EADkB,kBACAY,EADA,4BAC2BX,IAFnB,cACzBG,EADyB,yBAIxBA,EAASG,MAJe,2CAAH,sDAOjBO,EAAiB,mCAAG,WAAMF,GAAN,uFACRT,EAAAA,GAAAA,IAAA,UAClBH,EADkB,kBACAY,EADA,4BAC2BX,IAFnB,cACzBG,EADyB,yBAIxBA,EAASG,MAJe,2CAAH,qD,2MCjCjBQ,EAAWC,EAAAA,EAAAA,GAAH,iEAKRC,EAAaD,EAAAA,EAAAA,EAAH,6CAIVE,EAAcF,EAAAA,EAAAA,GAAH,+C,SCyDxB,EA5DgB,WACd,OAA8BG,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAkCJ,EAAAA,EAAAA,WAAS,GAA3C,eAAOK,EAAP,KAAkBC,EAAlB,KACQb,GAAYc,EAAAA,EAAAA,MAAZd,QAsBR,OApBAe,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAa,IAAIC,gBACjBC,EAAY,mCAAG,2FACnBL,GAAa,GADM,mBAGMX,EAAAA,EAAAA,IAAkBF,GAHxB,OAGXR,EAHW,OAIjBiB,EAAWjB,EAASI,SAJH,gDAMjBe,EAAS,KAAMQ,SANE,yBAQjBN,GAAa,GARI,4EAAH,qDAalB,OADAK,IACO,WACLF,EAAWI,OACZ,CACF,GAAE,CAACpB,KAGF,iCACE,SAACM,EAAD,sBACCM,IAAa,SAACS,EAAA,EAAD,IACbX,GACCY,IAAAA,OAAAA,QAAA,+CAC0CZ,EAAMS,SAC9C,CACEI,MAAO,YAIZf,IACC,SAACL,EAAD,UACGK,EAAQgB,KAAI,YAA8B,IAA3BC,EAA0B,EAA1BA,GAAIC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC1B,OACE,wBACGD,GACC,iCACE,UAACrB,EAAD,sBAAqBqB,MACrB,uBAAIC,OAGN,4CAPKF,EAWZ,QAKV,C","sources":["fetchMovies.jsx","pages/Reviews/Reviews.styled.jsx","pages/Reviews/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst KEY = '332ebb0c59493b862a9beffecc6f1777';\n\nexport const fetchTrending = async () => {\n  const response = await axios.get(\n    `${BASE_URL}/trending/movie/week?api_key=${KEY}`\n  );\n  console.log(response.data.results);\n  return response.data;\n};\n\nexport const fetchSearchMovie = async searchQuery => {\n  const response = await axios.get(\n    `${BASE_URL}/search/movie?api_key=${KEY}&query=${searchQuery}`\n  );\n  return response.data;\n};\n\nexport const fetchMovieDetails = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}?api_key=${KEY}`\n  );\n  console.log(response.data);\n  return response.data;\n};\n\nexport const fetchMovieCredits = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${KEY}`\n  );\n  return response.data;\n};\n\nexport const fetchMovieReviews = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${KEY}`\n  );\n  return response.data;\n};\n\n// /trending/get-trending список найпопулярніших фільмів на сьогодні для створення колекції на головній сторінці.\n// /search/search-movies пошук фільму за ключовим словом на сторінці фільмів.\n// /movies/get-movie-details запит повної інформації про фільм для сторінки кінофільму.\n// /movies/get-movie-credits запит інформації про акторський склад для сторінки кінофільму.\n// /movies/get-movie-reviews запит оглядів для сторінки кінофільму.\n","import styled from '@emotion/styled';\n\nexport const Addition = styled.ul`\n  list-style: none;\n  padding: 0 10px;\n`;\n\nexport const AuthorName = styled.p`\n  font-weight: 700;\n`;\n\nexport const ReviewTitle = styled.h2`\n  text-align: center;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Loader } from '../../components/Loader/Loader';\nimport { fetchMovieReviews } from 'fetchMovies';\nimport Notiflix from 'notiflix';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { Addition, AuthorName, ReviewTitle } from './Reviews.styled';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState(null);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const controller = new AbortController();\n    const fetchReviews = async () => {\n      setIsLoading(true);\n      try {\n        const response = await fetchMovieReviews(movieId);\n        setReviews(response.results);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchReviews();\n    return () => {\n      controller.abort();\n    };\n  }, [movieId]);\n\n  return (\n    <>\n      <ReviewTitle>Reviews</ReviewTitle>\n      {isLoading && <Loader />}\n      {error &&\n        Notiflix.Notify.failure(\n          `Sorry, but something happened wrong: ${error.message}`,\n          {\n            theme: 'colored',\n          }\n        )}\n\n      {reviews && (\n        <Addition>\n          {reviews.map(({ id, author, content }) => {\n            return (\n              <li key={id}>\n                {author ? (\n                  <>\n                    <AuthorName>Author: {author}</AuthorName>\n                    <p>{content}</p>\n                  </>\n                ) : (\n                  \"We don't hane any reviews for this movie\"\n                )}\n              </li>\n            );\n          })}\n        </Addition>\n      )}\n    </>\n  );\n};\n\nexport default Reviews;\n"],"names":["BASE_URL","KEY","fetchTrending","axios","response","console","log","data","results","fetchSearchMovie","searchQuery","fetchMovieDetails","movieId","fetchMovieCredits","fetchMovieReviews","Addition","styled","AuthorName","ReviewTitle","useState","reviews","setReviews","error","setError","isLoading","setIsLoading","useParams","useEffect","controller","AbortController","fetchReviews","message","abort","Loader","Notiflix","theme","map","id","author","content"],"sourceRoot":""}