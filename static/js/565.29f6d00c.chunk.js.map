{"version":3,"file":"static/js/565.29f6d00c.chunk.js","mappings":"sLAEaA,E,QAAYC,EAAAA,IAAH,6a,mMCAhBC,EAAW,+BACXC,EAAM,mCAECC,EAAa,mCAAG,oGACJC,EAAAA,GAAAA,IAAA,UAClBH,EADkB,wCACsBC,IAFlB,cACrBG,EADqB,OAI3BC,QAAQC,IAAIF,EAASG,KAAKC,SAJC,kBAKpBJ,EAASG,MALW,2CAAH,qDAQbE,EAAgB,mCAAG,WAAMC,GAAN,uFACPP,EAAAA,GAAAA,IAAA,UAClBH,EADkB,iCACeC,EADf,kBAC4BS,IAFrB,cACxBN,EADwB,yBAIvBA,EAASG,MAJc,2CAAH,sDAOhBI,EAAiB,mCAAG,WAAMC,GAAN,uFACRT,EAAAA,GAAAA,IAAA,UAClBH,EADkB,kBACAY,EADA,oBACmBX,IAFX,cACzBG,EADyB,OAI/BC,QAAQC,IAAIF,EAASG,MAJU,kBAKxBH,EAASG,MALe,2CAAH,sDAQjBM,EAAiB,mCAAG,WAAMD,GAAN,uFACRT,EAAAA,GAAAA,IAAA,UAClBH,EADkB,kBACAY,EADA,4BAC2BX,IAFnB,cACzBG,EADyB,yBAIxBA,EAASG,MAJe,2CAAH,sDAOjBO,EAAiB,mCAAG,WAAMF,GAAN,uFACRT,EAAAA,GAAAA,IAAA,UAClBH,EADkB,kBACAY,EADA,4BAC2BX,IAFnB,cACzBG,EADyB,yBAIxBA,EAASG,MAJe,2CAAH,qD,6MCjCjBQ,EAAWhB,EAAAA,EAAAA,GAAH,oJAURiB,EAAQjB,EAAAA,EAAAA,IAAH,wDAKLkB,EAAgBlB,EAAAA,EAAAA,GAAH,8eAuBbmB,EAAYnB,EAAAA,EAAAA,GAAH,+C,mBCmCtB,EAlEa,WACX,OAA4BoB,EAAAA,EAAAA,UAAS,MAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAkCJ,EAAAA,EAAAA,WAAS,GAA3C,eAAOK,EAAP,KAAkBC,EAAlB,KACQb,GAAYc,EAAAA,EAAAA,MAAZd,QAsBR,OApBAe,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAa,IAAIC,gBACjBC,EAAS,mCAAG,2FAChBL,GAAa,GADG,mBAGSZ,EAAAA,EAAAA,IAAkBD,GAH3B,OAGRR,EAHQ,OAIdiB,EAAUjB,EAAS2B,MAJL,gDAMdR,EAAS,KAAMS,SAND,yBAQdP,GAAa,GARC,4EAAH,qDAaf,OADAK,IACO,WACLF,EAAWK,OACZ,CACF,GAAE,CAACrB,KAGF,UAAC,IAAD,YACE,SAACM,EAAD,mBACCI,GACCY,IAAAA,OAAAA,QAAA,+CAC0CZ,EAAMU,SAC9C,CACEG,MAAO,aAGXf,GAAU,YAEXA,IACC,SAACL,EAAD,UACGK,EAAOgB,KAAI,YAA4C,IAAzCC,EAAwC,EAAxCA,GAAIC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,aAAcC,EAAgB,EAAhBA,UACrC,OACE,UAACvB,EAAD,WACGsB,GACC,SAACvB,EAAD,CACEyB,IAAG,yCAAoCF,GACvCG,IAAKJ,KAGP,SAACtB,EAAD,CACEyB,IAAI,sEACJC,IAAKJ,KAGT,uBAAIA,KACJ,uCAAeE,OAbGH,EAgBvB,MAGJb,IAAa,SAACmB,EAAA,EAAD,MAGnB,C","sources":["components/App.styled.jsx","fetchMovies.jsx","pages/Cast/Cast.styled.jsx","pages/Cast/Cast.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  margin-right: auto;\n  margin-left: auto;\n  padding: 0px 5px;\n\n  @media screen and (min-width: 320px) {\n    width: 300px;\n    padding: 0 10px;\n  }\n\n  @media screen and (min-width: 480px) {\n    width: 460px;\n    padding: 0 10px;\n  }\n\n  @media screen and (min-width: 768px) {\n    width: 728px;\n    padding: 0 20px;\n  }\n\n  @media screen and (min-width: 1200px) {\n    width: 1140px;\n  }\n`;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst KEY = '332ebb0c59493b862a9beffecc6f1777';\n\nexport const fetchTrending = async () => {\n  const response = await axios.get(\n    `${BASE_URL}/trending/movie/week?api_key=${KEY}`\n  );\n  console.log(response.data.results);\n  return response.data;\n};\n\nexport const fetchSearchMovie = async searchQuery => {\n  const response = await axios.get(\n    `${BASE_URL}/search/movie?api_key=${KEY}&query=${searchQuery}`\n  );\n  return response.data;\n};\n\nexport const fetchMovieDetails = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}?api_key=${KEY}`\n  );\n  console.log(response.data);\n  return response.data;\n};\n\nexport const fetchMovieCredits = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${KEY}`\n  );\n  return response.data;\n};\n\nexport const fetchMovieReviews = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${KEY}`\n  );\n  return response.data;\n};\n\n// /trending/get-trending список найпопулярніших фільмів на сьогодні для створення колекції на головній сторінці.\n// /search/search-movies пошук фільму за ключовим словом на сторінці фільмів.\n// /movies/get-movie-details запит повної інформації про фільм для сторінки кінофільму.\n// /movies/get-movie-credits запит інформації про акторський склад для сторінки кінофільму.\n// /movies/get-movie-reviews запит оглядів для сторінки кінофільму.\n","import styled from '@emotion/styled';\n\nexport const CastList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  margin-right: 10px;\n  list-style: none;\n  gap: 5px;\n  padding: 0;\n  margin: 0;\n`;\n\nexport const Image = styled.img`\n  width: 75%;\n  height: auto;\n`;\n\nexport const CastContainer = styled.li`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n\n  border-radius: 4px;\n  box-shadow: inset 0 0 10px 5px rgba(0, 0, 0, 0.3);\n\n  @media screen and (max-width: 767px) {\n    flex-basis: calc((100% - 5px) / 2);\n    padding: 5px 0;\n  }\n\n  @media screen and (min-width: 768px) {\n    flex-basis: calc((100% - 10px) / 3);\n  }\n\n  @media screen and (min-width: 1200px) {\n    flex-basis: calc((100% - 20px) / 5);\n  }\n`;\n\nexport const CastTitle = styled.h2`\n  text-align: center;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Loader } from 'components/Loader/Loader';\nimport { fetchMovieCredits } from 'fetchMovies';\nimport Notiflix from 'notiflix';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { CastList, Image, CastContainer, CastTitle } from './Cast.styled';\nimport { Container } from 'components/App.styled';\n\nconst Cast = () => {\n  const [actors, setActors] = useState(null);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const controller = new AbortController();\n    const fetchCast = async () => {\n      setIsLoading(true);\n      try {\n        const response = await fetchMovieCredits(movieId);\n        setActors(response.cast);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchCast();\n    return () => {\n      controller.abort();\n    };\n  }, [movieId]);\n\n  return (\n    <Container>\n      <CastTitle>Cast</CastTitle>\n      {error &&\n        Notiflix.Notify.failure(\n          `Sorry, but something happened wrong: ${error.message}`,\n          {\n            theme: 'colored',\n          }\n        )}\n      {!actors && 'No actors'}\n\n      {actors && (\n        <CastList>\n          {actors.map(({ id, name, profile_path, character }) => {\n            return (\n              <CastContainer key={id}>\n                {profile_path ? (\n                  <Image\n                    src={`https://image.tmdb.org/t/p/w500${profile_path}`}\n                    alt={name}\n                  />\n                ) : (\n                  <Image\n                    src=\"https://upload.wikimedia.org/wikipedia/commons/a/ac/Default_pfp.jpg\"\n                    alt={name}\n                  />\n                )}\n                <p>{name}</p>\n                <p>Character: {character}</p>\n              </CastContainer>\n            );\n          })}\n        </CastList>\n      )}\n      {isLoading && <Loader />}\n    </Container>\n  );\n};\n\nexport default Cast;\n"],"names":["Container","styled","BASE_URL","KEY","fetchTrending","axios","response","console","log","data","results","fetchSearchMovie","searchQuery","fetchMovieDetails","movieId","fetchMovieCredits","fetchMovieReviews","CastList","Image","CastContainer","CastTitle","useState","actors","setActors","error","setError","isLoading","setIsLoading","useParams","useEffect","controller","AbortController","fetchCast","cast","message","abort","Notiflix","theme","map","id","name","profile_path","character","src","alt","Loader"],"sourceRoot":""}