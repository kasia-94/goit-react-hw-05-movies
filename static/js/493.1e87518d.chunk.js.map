{"version":3,"file":"static/js/493.1e87518d.chunk.js","mappings":"mTAEMA,EAAW,+BACXC,EAAM,mCAECC,EAAa,mCAAG,oGACJC,EAAAA,GAAAA,IAAA,UAClBH,EADkB,uCACqBC,IAFjB,cACrBG,EADqB,yBAIpBA,EAASC,MAJW,2CAAH,qDAObC,EAAgB,mCAAG,WAAMC,GAAN,uFACPJ,EAAAA,GAAAA,IAAA,UAClBH,EADkB,iCACeC,EADf,kBAC4BM,IAFrB,cACxBH,EADwB,yBAIvBA,EAASC,MAJc,2CAAH,sDAOhBG,EAAiB,mCAAG,WAAMC,GAAN,uFACRN,EAAAA,GAAAA,IAAA,UAClBH,EADkB,kBACAS,EADA,oBACmBR,IAFX,cACzBG,EADyB,yBAIxBA,EAASC,MAJe,2CAAH,sDAOjBK,EAAiB,mCAAG,WAAMD,GAAN,uFACRN,EAAAA,GAAAA,IAAA,UAClBH,EADkB,kBACAS,EADA,4BAC2BR,IAFnB,cACzBG,EADyB,yBAIxBA,EAASC,MAJe,2CAAH,sDAOjBM,EAAiB,mCAAG,WAAMF,GAAN,uFACRN,EAAAA,GAAAA,IAAA,UAClBH,EADkB,kBACAS,EADA,4BAC2BR,IAFnB,cACzBG,EADyB,yBAIxBA,EAASC,MAJe,2CAAH,qD,6ICqC9B,UA/Da,WACX,OAA4BO,EAAAA,EAAAA,UAAS,MAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAkCJ,EAAAA,EAAAA,WAAS,GAA3C,eAAOK,EAAP,KAAkBC,EAAlB,KACQT,GAAYU,EAAAA,EAAAA,MAAZV,QAsBR,OApBAW,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAa,IAAIC,gBACjBC,EAAS,mCAAG,2FAChBL,GAAa,GADG,mBAGSR,EAAAA,EAAAA,IAAkBD,GAH3B,OAGRL,EAHQ,OAIdU,EAAUV,EAASoB,MAJL,gDAMdR,EAAS,KAAMS,SAND,yBAQdP,GAAa,GARC,4EAAH,qDAaf,OADAK,IACO,WACLF,EAAWK,OACZ,CACF,GAAE,CAACjB,KAGF,iCACE,iCACCM,GACCY,EAAAA,GAAAA,MAAA,+CAAoDZ,EAAMU,SAAW,CACnEG,MAAO,aAETf,GAAU,YAEXA,IACC,wBACGA,EAAOgB,KAAI,YAA4C,IAAzCC,EAAwC,EAAxCA,GAAIC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,aAAcC,EAAgB,EAAhBA,UACrC,OACE,0BACGD,GACC,gBACEE,IAAG,yCAAoCF,GACvCG,IAAKJ,KAGP,gBACEG,IAAI,sEACJC,IAAKJ,KAGT,uBAAIA,KACJ,uCAAeE,OAbRH,EAgBZ,MAGJb,IAAa,SAAC,IAAD,MAGnB,C","sources":["fetchMovies.jsx","pages/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst KEY = '332ebb0c59493b862a9beffecc6f1777';\n\nexport const fetchTrending = async () => {\n  const response = await axios.get(\n    `${BASE_URL}/trending/movie/day?api_key=${KEY}`\n  );\n  return response.data;\n};\n\nexport const fetchSearchMovie = async searchQuery => {\n  const response = await axios.get(\n    `${BASE_URL}/search/movie?api_key=${KEY}&query=${searchQuery}`\n  );\n  return response.data;\n};\n\nexport const fetchMovieDetails = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}?api_key=${KEY}`\n  );\n  return response.data;\n};\n\nexport const fetchMovieCredits = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${KEY}`\n  );\n  return response.data;\n};\n\nexport const fetchMovieReviews = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${KEY}`\n  );\n  return response.data;\n};\n\n// /trending/get-trending список найпопулярніших фільмів на сьогодні для створення колекції на головній сторінці.\n// /search/search-movies пошук фільму за ключовим словом на сторінці фільмів.\n// /movies/get-movie-details запит повної інформації про фільм для сторінки кінофільму.\n// /movies/get-movie-credits запит інформації про акторський склад для сторінки кінофільму.\n// /movies/get-movie-reviews запит оглядів для сторінки кінофільму.\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Loader } from 'components/Loader/Loader';\nimport { fetchMovieCredits } from 'fetchMovies';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst Cast = () => {\n  const [actors, setActors] = useState(null);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const controller = new AbortController();\n    const fetchCast = async () => {\n      setIsLoading(true);\n      try {\n        const response = await fetchMovieCredits(movieId);\n        setActors(response.cast);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchCast();\n    return () => {\n      controller.abort();\n    };\n  }, [movieId]);\n\n  return (\n    <>\n      <h2>Cast</h2>\n      {error &&\n        toast.error(`Sorry, but something happened wrong: ${error.message}`, {\n          theme: 'colored',\n        })}\n      {!actors && 'No actors'}\n\n      {actors && (\n        <ul>\n          {actors.map(({ id, name, profile_path, character }) => {\n            return (\n              <li key={id}>\n                {profile_path ? (\n                  <img\n                    src={`https://image.tmdb.org/t/p/w500${profile_path}`}\n                    alt={name}\n                  />\n                ) : (\n                  <img\n                    src=\"https://upload.wikimedia.org/wikipedia/commons/a/ac/Default_pfp.jpg\"\n                    alt={name}\n                  />\n                )}\n                <p>{name}</p>\n                <p>Character: {character}</p>\n              </li>\n            );\n          })}\n        </ul>\n      )}\n      {isLoading && <Loader />}\n    </>\n  );\n};\n\nexport default Cast;\n"],"names":["BASE_URL","KEY","fetchTrending","axios","response","data","fetchSearchMovie","searchQuery","fetchMovieDetails","movieId","fetchMovieCredits","fetchMovieReviews","useState","actors","setActors","error","setError","isLoading","setIsLoading","useParams","useEffect","controller","AbortController","fetchCast","cast","message","abort","toast","theme","map","id","name","profile_path","character","src","alt"],"sourceRoot":""}